#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "ArboreRegasire.h"


void Initializare(Dictionar *Nod)
{
	char c;

    // initializam nodul punand pe null toate elementele vectorului si punand ca gol sirul de caractere
	for (c = 'A'; c <= '['; c++)
		Nod->alfabet[c - 'A'] = NULL;
    strcpy(Nod->explicatie,"\0");
}

void InitializareDictionar(Dictionar **Nod)
{
    // alocam memorie si initializam nodul
    (*Nod) = (Dictionar*)malloc(sizeof(Dictionar));
    Initializare(*Nod);
}

void Atribuie(Dictionar *Nod, char c, Dictionar *p)
{
	Nod->alfabet[c - 'A'] = p;
}

Dictionar *Valoare(Dictionar *Nod, char c)
{
	return Nod->alfabet[c - 'A'];
}

void NodNou(Dictionar *Nod, char c)
{
	Nod->alfabet[c - 'A'] = (Dictionar *)malloc(sizeof(struct Dictionar));
	Initializare(Nod->alfabet[c - 'A']);
}

void Adauga(char *cuvant, char *explicatie, Dictionar *radacina)
{
	int i;
	Dictionar *t;

	t = radacina;
	for (i = 0; i<strlen(cuvant);i++)
	{
		if (Valoare(t, cuvant[i]) == NULL)
			NodNou(t, cuvant[i]);
		t = Valoare(t, cuvant[i]);
	}
	Atribuie(t, '[', t);
    strcpy(t->explicatie,explicatie);
}

void Afisare(Dictionar *radacina, char *aux, int pozitie)
{
    int i;

    if(radacina == NULL)
        return;
    if(radacina == radacina->alfabet[26])
    {
        aux[pozitie] = '\0';
        printf("%s - %s\n",aux,radacina->explicatie);
    }

    for(i=0; i<26; i++)
        if(radacina->alfabet[i] != NULL)
        {
            aux[pozitie] = i + 'A';
            Afisare(radacina->alfabet[i], aux, pozitie+1);
        }
}

void CautaCuvant(char *cuvant, Dictionar *radacina, int pozitie)
{
    // daca am parcurs atatea litere cate are cuvantul cautat si avem si terminator de cuvant
    // inseamna ca am gasit cuvantul cautat
    if(pozitie == strlen(cuvant) && radacina->alfabet[26] != NULL)
        printf("\n %s = %s \n",cuvant,radacina->explicatie);
    else
    {
        // altfel mai cautam
        if(radacina->alfabet[cuvant[pozitie] - 'A'] == NULL)
            printf("Cuvantul cautat nu a fost gasit\n");
        else
            CautaCuvant(cuvant,radacina->alfabet[cuvant[pozitie] - 'A'], pozitie+1);
    }
}

int Inaltime(Dictionar *radacina, int nivel)
{
    int max = 0, i, aux, gasit = 0;

    // pentru fiecare nod retinem inaltimea maxima de pana atunci de la copii lui si o returnam mai sus
    for(i=0; i<26; i++)
        if(radacina->alfabet[i] != NULL)
        {
            gasit = 1;
            aux = Inaltime(radacina->alfabet[i], nivel+1);
            if(aux > max) max = aux;
        }
    if(gasit == 0)
        return nivel;
    else return max;
}

int NumarNoduri(Dictionar *radacina)
{
    int i, gasit = 0, suma=0;

    for(i=0; i<26; i++)
        if(radacina->alfabet[i] != NULL)
        {
            gasit = 1;
            suma = suma + NumarNoduri(radacina->alfabet[i]);
        }
    
    if(gasit == 0)
        return 1;
    else return suma+1;
}

void PrimCuvant(Dictionar *radacina, char *cuvant, int pozitie)
{
    int i;

    if(radacina == NULL)
        return;
    if(radacina->alfabet[26] != NULL)
    {
        // daca am gasit primul terminator de cuvant inseamna ca avem primul cuvant
        cuvant[pozitie] = '\0';
        printf("\n Primul cuvant este %s \n",cuvant);
    }
    else
    {
        // daca nu, mai cautam
        for(i=0; i<26; i++)
            if(radacina->alfabet[i] != NULL)
            {
                cuvant[pozitie] = i + 'A';
                PrimCuvant(radacina->alfabet[i],cuvant,pozitie+1);
                break;
            }
    }
}

void CuvantulCelMaiLung(Dictionar *radacina, char *cuvant, int pozitie, int inaltime)
{
    int i;

    if(radacina == NULL)
        return;
    if(radacina == radacina->alfabet[26] && strlen(cuvant) == inaltime)
    {
        // cand gasim un terminator de cuvant si avem lungimea cuvantului = cu inaltimea(adica cel mai lung cuvant)
        // inseamna ca afisam cuvantul
        cuvant[pozitie] = '\0';
        printf("%s\n",cuvant);
    }

    // apoi continuam sa parcurgem dictionarul
    for(i=0; i<26; i++)
        if(radacina->alfabet[i] != NULL)
        {
            cuvant[pozitie] = i + 'A';
            CuvantulCelMaiLung(radacina->alfabet[i], cuvant, pozitie+1, inaltime);
        }   
}

int main()
{
    int nrCuvinte, i;
    char cuvant[30], explicatie[256], aux[256];
    Dictionar *arb;

    ////////// Initializare Dictionar
    InitializareDictionar(&arb);

    
    ////////// Citire cuvinte si adaugare in dictionar
    printf("Cate cuvinte doriti sa adaugati = ");
    scanf("%d",&nrCuvinte);
    fflush(stdin);

    for(i=0; i<nrCuvinte; i++)
    {
        printf("Cuvant = ");
        scanf("%s",cuvant);
        printf("Explicatie = ");
        scanf("%s",explicatie);
        fflush(stdin);

        Adauga(cuvant,explicatie,arb);
    }


    ////////// Afisare cuvinte din dex alfabetic
    printf("\n");
    Afisare(arb, aux, 0);


    ////////// Cautare cuvant si afisare explicatie
    printf("\n");
    printf("Cuvantul de cautat = ");
    scanf("%s",cuvant);
    printf("\n");
    CautaCuvant(cuvant, arb, 0);


    ////////// Inaltime arbore
    int inaltime = Inaltime(arb, 0);
    printf("\n Inaltimea arborelui = %d",inaltime);


    ////////// Afisare cuvinte ce incep cu o litera x
    char c;
    fflush(stdin);
    printf("\n\n Litera de inceput = ");
    scanf("%c",&c);
    if(arb->alfabet[c-'A'] == NULL)
        printf("Nu exista cuvinte care incep cu litera respectiva\n");
    else
    {
        aux[0] = c;
        Afisare(arb->alfabet[c-'A'],aux,1);
    }


    ////////// Numar noduri in arbore
    int nrNoduri = NumarNoduri(arb);
    printf("\n Numarul de noduri din arbore = %d",nrNoduri);
    printf("\n");


    ////////// Raport numar de pointeri nenul supra numar de pointeri
    float nrPointeri = nrNoduri * 26;
    float nrPointeriNenuli = nrNoduri - 1;
    float raport = nrPointeriNenuli/nrPointeri;
    printf("\n Raportul = %f\n",raport);


    ////////// Prim cuvant din dictionar
    printf("\n");
    aux[0] = '\0';
    PrimCuvant(arb,aux,0);


    ////////// Cel mai lung cuvant
    printf("\n");
    aux[0] = '0';
    printf("Cuvantul cel mai lung/Cuvintele cele mai lungi: \n");
    CuvantulCelMaiLung(arb,aux,0,inaltime);
    return 0;
}